@use 'scss/abstracts/colors';

$themes: (
  light: (
    //Main Components
    light: colors.$light-blue,
    main: colors.$main-blue,
    dark: colors.$white-font,

    //Button
    highlight: colors.$dark-blue,
    hover: colors.$highlight,
    disabled: colors.$disabled,

    //Pagination
    pagination-main: colors.$white-font,
    pagination-hover: colors.$highlight,
    pagination-disabled: colors.$disabled,

    //Select
    select-main: colors.$white-font,
    select-hover: colors.$highlight,
    select-disabled: colors.$disabled,

    //Font text
    primary: colors.$dark-font,
    secondary: colors.$dark,
    error: colors.$error-font,
  ),
  dark: (
    //Main Components
    light: colors.$light,
    main: colors.$main,
    dark: colors.$dark,

    //Button
    highlight: colors.$highlight,
    hover: colors.$hover,
    disabled: colors.$disabled,

    //Pagination
    pagination-main: colors.$main,
    pagination-hover: colors.$light,
    pagination-disabled: colors.$disabled,

    //Select
    select-main: colors.$main,
    select-hover: colors.$highlight,
    select-disabled: colors.$disabled,

    //Font text
    primary: colors.$white-font,
    secondary: colors.$secondary-font,
    error: colors.$error-font,
  ),
);

@mixin themify($themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}
